// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
    url  	    = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  firstName  String  
  lastName   String
  email     String   @unique
  password  String  
  createdAt DateTime @default(now())
  isSubscribed  Boolean   @default(false)  
  messages    Message[]    // Relation to messages table
  roomUsers   RoomUser[]   // Relation to roomUsers table
  aiChats    AiChat[] // Relation to AIChat table
}

model Room{
  id String @id @default(uuid())
  name String
  createdAt DateTime @default(now())
  messages    Message[]    // Relation to messages table
  roomUsers   RoomUser[]   // Relation to roomUsers table
}

model Message{
  id String @id @default(uuid())
  message String
  roomId String
  userId Int
  createdAt DateTime @default(now())
  room        Room         @relation(fields: [roomId], references: [id], onDelete: Cascade) // Foreign key to Room
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade) // Foreign key to User
}

model RoomUser{
  id String @id @default(uuid())
  roomId String
  userId Int
  createdAt DateTime @default(now())
  room        Room         @relation(fields: [roomId], references: [id], onDelete: Cascade) // Foreign key to Room
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade) // Foreign key to User

  @@unique([roomId, userId]) // Prevents duplicate user-room associations
}

model AiChat {
  chatId     String    @id @default(uuid())
  chatName  String
  userId     Int
  messages   Json      // Storing messages as JSON array
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Foreign key to User

  @@unique([chatId, userId]) // Unique constraint on chatId and userId
}